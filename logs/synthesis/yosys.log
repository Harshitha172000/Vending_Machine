
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/vm/src/vm.v
Parsing SystemVerilog input from `/openLANE_flow/designs/vm/src/vm.v' to AST representation.
Generating RTLIL representation for module `\vm'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/vm/runs/epin/tmp/synthesis/hierarchy.dot'.
Dumping module vm to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \vm

3.2. Analyzing design hierarchy..
Top module:  \vm
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \vm

5.1.2. Analyzing design hierarchy..
Top module:  \vm
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openLANE_flow/designs/vm/src/vm.v:23$1 in module vm.
Marked 27 switch rules as full_case in process $proc$/openLANE_flow/designs/vm/src/vm.v:23$1 in module vm.
Removed a total of 1 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
     1/3: $0\state[2:0]
     2/3: $0\change[1:0]
     3/3: $0\out[2:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\vm.\out' using process `\vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
  created $dff cell `$procdff$266' with positive edge clock.
Creating register for signal `\vm.\change' using process `\vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
  created $dff cell `$procdff$267' with positive edge clock.
Creating register for signal `\vm.\state' using process `\vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
  created $dff cell `$procdff$268' with positive edge clock.

5.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 27 empty switches in `\vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
Removing empty process `vm.$proc$/openLANE_flow/designs/vm/src/vm.v:23$1'.
Cleaned up 27 empty switches.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~3 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 3 unused cells and 59 unused wires.
<suppressed ~4 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
checking module vm..
found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
    New ctrl vector for $pmux cell $procmux$36: { $procmux$179_CMP $procmux$170_CMP $procmux$150_CMP $procmux$140_CMP $auto$opt_reduce.cc:134:opt_mux$270 }
  Optimizing cells in module \vm.
Performed a total of 1 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 0 unused cells and 51 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
    New ctrl vector for $pmux cell $procmux$109: { $procmux$179_CMP $procmux$150_CMP $auto$opt_reduce.cc:134:opt_mux$274 $auto$opt_reduce.cc:134:opt_mux$272 }
  Optimizing cells in module \vm.
Performed a total of 1 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.7.16. Rerunning OPT passes. (Maybe there is more to do..)

5.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

5.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.7.20. Executing OPT_DFF pass (perform DFF optimizations).

5.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.7.23. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking vm.change as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking vm.out as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Found FSM state register vm.state.

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\vm'.
  found $dff cell for state register: $procdff$268
  root of input selection tree: $0\state[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found ctrl input: $auto$opt_reduce.cc:134:opt_mux$270
  found ctrl input: $procmux$140_CMP
  found ctrl input: $procmux$150_CMP
  found ctrl input: $procmux$170_CMP
  found ctrl input: $procmux$179_CMP
  found state code: 3'000
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:113$15_Y
  found state code: 3'110
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:118$16_Y
  found state code: 3'101
  found state code: 3'100
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:31$2_Y
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:36$3_Y
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:41$4_Y
  found ctrl input: $eq$/openLANE_flow/designs/vm/src/vm.v:46$5_Y
  found state code: 3'111
  found state code: 3'011
  found state code: 3'010
  found state code: 3'001
  found ctrl output: $procmux$110_CMP
  found ctrl output: $procmux$120_CMP
  found ctrl output: $procmux$130_CMP
  found ctrl output: $procmux$140_CMP
  found ctrl output: $procmux$150_CMP
  found ctrl output: $procmux$160_CMP
  found ctrl output: $procmux$170_CMP
  found ctrl output: $procmux$179_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_mux$270 $eq$/openLANE_flow/designs/vm/src/vm.v:118$16_Y $eq$/openLANE_flow/designs/vm/src/vm.v:113$15_Y $eq$/openLANE_flow/designs/vm/src/vm.v:46$5_Y $eq$/openLANE_flow/designs/vm/src/vm.v:41$4_Y $eq$/openLANE_flow/designs/vm/src/vm.v:36$3_Y $eq$/openLANE_flow/designs/vm/src/vm.v:31$2_Y \reset }
  ctrl outputs: { $procmux$179_CMP $procmux$170_CMP $procmux$160_CMP $procmux$150_CMP $procmux$140_CMP $procmux$130_CMP $procmux$120_CMP $procmux$110_CMP $0\state[2:0] }
  transition:      3'000 8'---00000 ->      3'000 11'10000000000
  transition:      3'000 8'---10000 ->      3'111 11'10000000111
  transition:      3'000 8'----1000 ->      3'011 11'10000000011
  transition:      3'000 8'-----100 ->      3'010 11'10000000010
  transition:      3'000 8'------10 ->      3'001 11'10000000001
  transition:      3'000 8'-------1 ->      3'000 11'10000000000
  transition:      3'100 8'-------0 ->      3'000 11'00100000000
  transition:      3'100 8'-------1 ->      3'000 11'00100000000
  transition:      3'010 8'-00----0 ->      3'000 11'00010000000
  transition:      3'010 8'-10----0 ->      3'110 11'00010000110
  transition:      3'010 8'--1----0 ->      3'101 11'00010000101
  transition:      3'010 8'-------1 ->      3'000 11'00010000000
  transition:      3'110 8'-------0 ->      3'000 11'00000100000
  transition:      3'110 8'-------1 ->      3'000 11'00000100000
  transition:      3'001 8'--0----0 ->      3'000 11'01000000000
  transition:      3'001 8'--1----0 ->      3'100 11'01000000100
  transition:      3'001 8'-------1 ->      3'000 11'01000000000
  transition:      3'101 8'--0----0 ->      3'000 11'00001000000
  transition:      3'101 8'--1----0 ->      3'110 11'00001000110
  transition:      3'101 8'-------1 ->      3'000 11'00001000000
  transition:      3'011 8'-------0 ->      3'000 11'00000010000
  transition:      3'011 8'-------1 ->      3'000 11'00000010000
  transition:      3'111 8'-------0 ->      3'000 11'00000001000
  transition:      3'111 8'-------1 ->      3'000 11'00000001000

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$275' from module `\vm'.
  Merging pattern 8'-------0 and 8'-------1 from group (1 0 11'00100000000).
  Merging pattern 8'-------1 and 8'-------0 from group (1 0 11'00100000000).
  Merging pattern 8'-------0 and 8'-------1 from group (3 0 11'00000100000).
  Merging pattern 8'-------1 and 8'-------0 from group (3 0 11'00000100000).
  Merging pattern 8'-------0 and 8'-------1 from group (6 0 11'00000010000).
  Merging pattern 8'-------1 and 8'-------0 from group (6 0 11'00000010000).
  Merging pattern 8'-------0 and 8'-------1 from group (7 0 11'00000001000).
  Merging pattern 8'-------1 and 8'-------0 from group (7 0 11'00000001000).
  Removing unused input signal $auto$opt_reduce.cc:134:opt_mux$270.

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$275' from module `\vm'.
  Removing unused output signal $0\state[2:0] [0].
  Removing unused output signal $0\state[2:0] [1].
  Removing unused output signal $0\state[2:0] [2].

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$275' from module `\vm' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> -------1
  100 -> ------1-
  010 -> -----1--
  110 -> ----1---
  001 -> ---1----
  101 -> --1-----
  011 -> -1------
  111 -> 1-------

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$275' from module `vm':
-------------------------------------

  Information on FSM $fsm$\state$275 (\state):

  Number of input signals:    7
  Number of output signals:   8
  Number of state bits:       8

  Input signals:
    0: \reset
    1: $eq$/openLANE_flow/designs/vm/src/vm.v:31$2_Y
    2: $eq$/openLANE_flow/designs/vm/src/vm.v:36$3_Y
    3: $eq$/openLANE_flow/designs/vm/src/vm.v:41$4_Y
    4: $eq$/openLANE_flow/designs/vm/src/vm.v:46$5_Y
    5: $eq$/openLANE_flow/designs/vm/src/vm.v:113$15_Y
    6: $eq$/openLANE_flow/designs/vm/src/vm.v:118$16_Y

  Output signals:
    0: $procmux$110_CMP
    1: $procmux$120_CMP
    2: $procmux$130_CMP
    3: $procmux$140_CMP
    4: $procmux$150_CMP
    5: $procmux$160_CMP
    6: $procmux$170_CMP
    7: $procmux$179_CMP

  State encoding:
    0: 8'-------1  <RESET STATE>
    1: 8'------1-
    2: 8'-----1--
    3: 8'----1---
    4: 8'---1----
    5: 8'--1-----
    6: 8'-1------
    7: 8'1-------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 7'--00000   ->     0 8'10000000
      1:     0 7'------1   ->     0 8'10000000
      2:     0 7'----100   ->     2 8'10000000
      3:     0 7'-----10   ->     4 8'10000000
      4:     0 7'---1000   ->     6 8'10000000
      5:     0 7'--10000   ->     7 8'10000000
      6:     1 7'-------   ->     0 8'00100000
      7:     2 7'00----0   ->     0 8'00010000
      8:     2 7'------1   ->     0 8'00010000
      9:     2 7'10----0   ->     3 8'00010000
     10:     2 7'-1----0   ->     5 8'00010000
     11:     3 7'-------   ->     0 8'00000100
     12:     4 7'-0----0   ->     0 8'01000000
     13:     4 7'------1   ->     0 8'01000000
     14:     4 7'-1----0   ->     1 8'01000000
     15:     5 7'-0----0   ->     0 8'00001000
     16:     5 7'------1   ->     0 8'00001000
     17:     5 7'-1----0   ->     3 8'00001000
     18:     6 7'-------   ->     0 8'00000010
     19:     7 7'-------   ->     0 8'00000001

-------------------------------------

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$275' from module `\vm'.

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~4 debug messages>

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$267 ($dff) from module vm (D = $procmux$109_Y, Q = \change, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$339 ($sdff) from module vm (D = $procmux$109_Y, Q = \change).
Adding SRST signal on $procdff$266 ($dff) from module vm (D = $procmux$192_Y, Q = \out, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$351 ($sdff) from module vm (D = $procmux$192_Y, Q = \out).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 2 unused cells and 16 unused wires.
<suppressed ~3 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~2 debug messages>

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell vm.$eq$/openLANE_flow/designs/vm/src/vm.v:31$2 ($eq).
Removed top 1 bits (of 3) from port B of cell vm.$eq$/openLANE_flow/designs/vm/src/vm.v:36$3 ($eq).
Removed top 1 bits (of 3) from port B of cell vm.$eq$/openLANE_flow/designs/vm/src/vm.v:41$4 ($eq).
Removed top 1 bits (of 2) from port B of cell vm.$eq$/openLANE_flow/designs/vm/src/vm.v:113$15 ($eq).
Removed top 3 bits (of 4) from port B of cell vm.$auto$opt_dff.cc:218:make_patterns_logic$343 ($ne).
Removed cell vm.$procmux$122 ($mux).
Removed cell vm.$procmux$132 ($mux).
Removed top 1 bits (of 2) from mux cell vm.$procmux$135 ($mux).
Removed top 1 bits (of 2) from mux cell vm.$procmux$138 ($mux).
Removed cell vm.$procmux$142 ($mux).
Removed cell vm.$procmux$145 ($mux).
Removed cell vm.$procmux$148 ($mux).
Removed cell vm.$procmux$184 ($mux).
Removed cell vm.$procmux$187 ($mux).
Removed cell vm.$procmux$195 ($mux).
Removed cell vm.$procmux$198 ($mux).
Removed cell vm.$procmux$201 ($mux).
Removed top 3 bits (of 4) from port B of cell vm.$auto$opt_dff.cc:218:make_patterns_logic$355 ($ne).
Removed top 3 bits (of 4) from port B of cell vm.$auto$opt_dff.cc:218:make_patterns_logic$357 ($ne).
Removed top 1 bits (of 2) from wire vm.$procmux$104_Y.

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module vm:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
    New ctrl vector for $pmux cell $procmux$109: { $auto$opt_reduce.cc:134:opt_mux$363 $auto$opt_reduce.cc:134:opt_mux$274 $auto$opt_reduce.cc:134:opt_mux$272 }
  Optimizing cells in module \vm.
Performed a total of 1 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.15.16. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~3 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
    Consolidated identical input bits for $mux cell $procmux$190:
      Old ports: A=3'100, B=3'000, Y=$procmux$190_Y
      New ports: A=1'1, B=1'0, Y=$procmux$190_Y [2]
      New connections: $procmux$190_Y [1:0] = 2'00
  Optimizing cells in module \vm.
Performed a total of 1 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~1 debug messages>

5.20.10. Rerunning OPT passes. (Maybe there is more to do..)

5.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

5.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

5.20.14. Executing OPT_SHARE pass.

5.20.15. Executing OPT_DFF pass (perform DFF optimizations).

5.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

5.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.20.18. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
No more expansions possible.
<suppressed ~172 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.
<suppressed ~111 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 0 unused cells and 109 unused wires.
<suppressed ~1 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\vm' to `<abc-temp-dir>/input.blif'..
Extracted 165 gates and 184 wires to a netlist network with 17 inputs and 15 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       55
ABC RESULTS:               MUX cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:       53
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:        internal signals:      152
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       15
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 0 unused cells and 126 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \vm

5.25.2. Analyzing design hierarchy..
Top module:  \vm
Removed 0 unused modules.

5.26. Printing statistics.

=== vm ===

   Number of wires:                143
   Number of wire bits:            159
   Number of public wires:           7
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                152
     $_ANDNOT_                      54
     $_AND_                          3
     $_DFF_P_                        8
     $_MUX_                          2
     $_NAND_                         3
     $_NOR_                          7
     $_NOT_                          3
     $_ORNOT_                       14
     $_OR_                          53
     $_SDFFE_PP0P_                   5

5.27. Executing CHECK pass (checking for obvious problems).
checking module vm..
found and reported 0 problems.

6. Executing SHARE pass (SAT-based resource sharing).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vm.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vm'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vm.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..

9. Printing statistics.

=== vm ===

   Number of wires:                143
   Number of wire bits:            159
   Number of public wires:           7
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                152
     $_ANDNOT_                      54
     $_AND_                          3
     $_DFF_P_                        8
     $_MUX_                          2
     $_NAND_                         3
     $_NOR_                          7
     $_NOT_                          3
     $_ORNOT_                       14
     $_OR_                          53
     $_SDFFE_PP0P_                   5

10. Executing TECHMAP pass (map to technology primitives).

10.1. Executing Verilog-2005 frontend: /home/harshitha/Desktop/vlsi/pdk_files/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/harshitha/Desktop/vlsi/pdk_files/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

11. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_4 (noninv, pins=3, area=23.77) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_4 (noninv, pins=4, area=28.78) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_4 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_4 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_4 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_4 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

12.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\vm':
  mapped 13 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_4 cells.

13. Printing statistics.

=== vm ===

   Number of wires:                153
   Number of wire bits:            169
   Number of public wires:           7
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                162
     $_ANDNOT_                      54
     $_AND_                          3
     $_MUX_                         12
     $_NAND_                         3
     $_NOR_                          7
     $_NOT_                          3
     $_ORNOT_                       14
     $_OR_                          53
     sky130_fd_sc_hd__dfxtp_4       13

14. Executing ABC pass (technology mapping using ABC).

14.1. Extracting gate netlist of module `\vm' to `/tmp/yosys-abc-IT9lnc/input.blif'..
Extracted 149 gates and 169 wires to a netlist network with 19 inputs and 13 outputs.

14.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-IT9lnc/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-IT9lnc/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-IT9lnc/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/vm/runs/epin/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/vm/runs/epin/tmp/trimmed.lib" has 43 cells (6 skipped: 6 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.17 sec
ABC: Memory =    1.82 MB. Time =     0.17 sec
ABC: + read_constr -v /openLANE_flow/designs/vm/runs/epin/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/vm/runs/epin/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + buffer -N 5 -S 1000.0 
ABC: + upsize -D 10000 
ABC: Current delay (1903.75 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     75 ( 26.7 %)   Cap =  8.8 ff (  0.0 %)   Area =      729.45 (100.0 %)   Delay =  1903.75 ps  ( 13.3 %)               
ABC: Path  0 --       9 : 0    4 pi                      A =   0.00  Df =  15.3  -10.3 ps  S =  29.3 ps  Cin =  0.0 ff  Cout =  12.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      39 : 2    4 sky130_fd_sc_hd__or2_4  A =   8.76  Df = 258.3 -115.1 ps  S =  65.5 ps  Cin =  2.4 ff  Cout =  16.9 ff  Cmax = 514.5 ff  G =  657  
ABC: Path  2 --      42 : 4    2 sky130_fd_sc_hd__or4_4  A =  11.26  Df = 696.7 -422.4 ps  S =  98.0 ps  Cin =  2.4 ff  Cout =  12.2 ff  Cmax = 534.7 ff  G =  482  
ABC: Path  3 --      43 : 4    2 sky130_fd_sc_hd__or4_4  A =  11.26  Df =1137.2 -743.4 ps  S =  92.9 ps  Cin =  2.4 ff  Cout =   9.2 ff  Cmax = 534.7 ff  G =  370  
ABC: Path  4 --      44 : 1    2 sky130_fd_sc_hd__inv_2  A =   3.75  Df =1219.4 -788.5 ps  S =  57.2 ps  Cin =  4.5 ff  Cout =   9.5 ff  Cmax = 331.4 ff  G =  198  
ABC: Path  5 --      61 : 3    2 sky130_fd_sc_hd__a21o_4 A =  15.01  Df =1306.6 -701.5 ps  S =  36.7 ps  Cin =  4.5 ff  Cout =   7.2 ff  Cmax = 568.6 ff  G =  150  
ABC: Path  6 --      62 : 1    3 sky130_fd_sc_hd__inv_2  A =   3.75  Df =1353.1 -666.2 ps  S =  83.6 ps  Cin =  4.5 ff  Cout =  16.9 ff  Cmax = 331.4 ff  G =  361  
ABC: Path  7 --      63 : 3    1 sky130_fd_sc_hd__o21a_4 A =  15.01  Df =1454.5 -486.1 ps  S =  30.5 ps  Cin =  4.6 ff  Cout =   2.5 ff  Cmax = 510.0 ff  G =   51  
ABC: Path  8 --      65 : 3    1 sky130_fd_sc_hd__or3_4  A =  11.26  Df =1807.3 -215.5 ps  S =  65.3 ps  Cin =  2.4 ff  Cout =   4.6 ff  Cmax = 531.9 ff  G =  189  
ABC: Path  9 --      66 : 1    1 sky130_fd_sc_hd__inv_2  A =   3.75  Df =1903.8 -263.5 ps  S =  87.6 ps  Cin =  4.5 ff  Cout =  17.6 ff  Cmax = 331.4 ff  G =  395  
ABC: Start-point = pi8 (\state [4]).  End-point = po1 ($auto$rtlil.cc:2290:MuxGate$1062).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   19/   13  lat =    0  nd =    75  edge =    186  area =729.37  delay = 9.00  lev = 9
ABC: + write_blif /tmp/yosys-abc-IT9lnc/output.blif 

14.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_4 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and4_4 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o21a_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        5
ABC RESULTS:        internal signals:      137
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       13
Removing temp directory.

15. Executing SETUNDEF pass (replace undef values with defined constants).

16. Executing HILOMAP pass (mapping to constant drivers).

17. Executing SPLITNETS pass (splitting up multi-bit signals).

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vm..
Removed 0 unused cells and 168 unused wires.
<suppressed ~1 debug messages>

19. Executing INSBUF pass (insert buffer cells for connected wires).

20. Executing CHECK pass (checking for obvious problems).
checking module vm..
Warning: Wire vm.\out [2] is used but has no driver.
Warning: Wire vm.\out [1] is used but has no driver.
Warning: Wire vm.\out [0] is used but has no driver.
Warning: Wire vm.\change [1] is used but has no driver.
Warning: Wire vm.\change [0] is used but has no driver.
found and reported 5 problems.

21. Printing statistics.

=== vm ===

   Number of wires:                 89
   Number of wire bits:             95
   Number of public wires:          14
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88
     sky130_fd_sc_hd__a211o_4        2
     sky130_fd_sc_hd__a21o_4         3
     sky130_fd_sc_hd__a21oi_4        3
     sky130_fd_sc_hd__and2_4         4
     sky130_fd_sc_hd__and3_4         8
     sky130_fd_sc_hd__and4_4         7
     sky130_fd_sc_hd__buf_2          6
     sky130_fd_sc_hd__dfxtp_4       13
     sky130_fd_sc_hd__inv_2         14
     sky130_fd_sc_hd__o21a_4         3
     sky130_fd_sc_hd__o22a_4         1
     sky130_fd_sc_hd__o32a_4         1
     sky130_fd_sc_hd__or2_4         12
     sky130_fd_sc_hd__or3_4          6
     sky130_fd_sc_hd__or4_4          5

   Chip area for module '\vm': 1038.496000

22. Executing Verilog backend.
Dumping module `\vm'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 7c7b07cd1b, CPU: user 9.89s system 0.67s, MEM: 44.11 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 46% 4x stat (5 sec), 20% 2x abc (2 sec), ...
